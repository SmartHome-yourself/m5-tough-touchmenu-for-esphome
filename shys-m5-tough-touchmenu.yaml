#substitutions:
#  devicename: "m5-tough"
#  display_name: "M5 Tough"
#  wifi_ssid: "unknown"
#  wifi_password: "unknown"
#  m5_textsensor_id: "m5_textsensor_id"
  
esphome:
  name: ${devicename}

  platformio_options:
    platform: espressif32@3.0.0
    board: esp32dev
    framework: arduino

    lib_deps:
      - WiFi
      - SPI
      - FS
      - Wire
      - EEPROM
      - m5stack/M5Unified @ 0.0.7

  on_boot:
    priority: 0
    then:
      - binary_sensor.template.publish:
          id: logged_in
          state: off
      - sensor.template.publish:
          id: failed_logins
          state: 0

external_components:
  - source: github://SmartHome-yourself/m5-tough-touchmenu-for-esphome

esp32:
  board: esp32dev

logger:
api:

ota:
  password: "4c34d1666aad1195bf769c0c0e54c6ee"

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}
  ap:
    ssid: ${display_name} "Fallback Hotspot"
    password: "q1We1Dc5kkQe"
captive_portal:

binary_sensor:
  - platform: template
    name: "M5 Touch Angemeldet"
    id: logged_in

  - platform: template
    name: "M5 Touch Display on"
    id: display_on

sensor:
  - platform: template
    name: "Failed Logins"
    id: failed_logins
    accuracy_decimals: 0
    unit_of_measurement: "Fehler"


text_sensor:

  - platform: template
    id: m5_state_tpl
    name: m5_state
    lambda: |-
      return {id(${m5_textsensor_id}).state};
    update_interval: 500ms

    on_value:
      then:
        - if:
            condition:
              text_sensor.state:
                id: m5_state_tpl
                state: "Login OK"
            then:
              - binary_sensor.template.publish:
                  id: logged_in
                  state: on
              - sensor.template.publish:
                  id: failed_logins
                  state: 0

        - if:
            condition:
              text_sensor.state:
                id: m5_state_tpl
                state: "Login failed"
            then:
              - lambda: "id(failed_logins).publish_state( id(failed_logins).state + 1 );"

        - if:
            condition:
              - or:
                  - text_sensor.state:
                      id: m5_state_tpl
                      state: "Login failed"
                  - text_sensor.state:
                      id: m5_state_tpl
                      state: "Screen locked"
                  - text_sensor.state:
                      id: m5_state_tpl
                      state: "Display off"
            then:
              - binary_sensor.template.publish:
                  id: logged_in
                  state: OFF

        - if:
            condition:
              - or:
                  - text_sensor.state:
                      id: m5_state_tpl
                      state: "Display on"
            then:
              - binary_sensor.template.publish:
                  id: display_on
                  state: ON

        - if:
            condition:
              - or:
                  - text_sensor.state:
                      id: m5_state_tpl
                      state: "Display off"
            then:
              - binary_sensor.template.publish:
                  id: display_on
                  state: OFF

